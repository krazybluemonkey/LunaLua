#include "VB6RNG.h"
#include <OAIdl.h>
#include <WTypes.h>

// Initialized in RuntimeHookGeneral.cpp
void (__stdcall *rtcRandomize)(VARIANTARG const* arg) = 0;
float (__stdcall *rtcRandomNext)(VARIANTARG const* arg) = 0;

// Calling rtcRandomNext(rtcRandomNext_args[i]) sets the least significant bit of the seed to i.
static float rtcRandomNext_args[256] {
    -2.70450604e-43,-3.08285662e-44,-1.49938936e-43,-2.69049305e-43,-2.94272678e-44,-1.48537637e-43,-2.67648007e-43,-2.80259693e-44,
    -1.47136339e-43,-2.66246708e-43,-2.66246708e-44,-1.4573504e-43,-2.6484541e-43,-2.52233724e-44,-1.44333742e-43,-2.63444111e-43,
    -2.38220739e-44,-1.42932443e-43,-2.62042813e-43,-2.24207754e-44,-1.41531145e-43,-2.60641514e-43,-2.1019477e-44,-1.40129846e-43,
    -2.59240216e-43,-1.96181785e-44,-1.38728548e-43,-2.57838917e-43,-1.821688e-44,-1.3732725e-43,-2.56437619e-43,-1.68155816e-44,
    -1.35925951e-43,-2.55036321e-43,-1.54142831e-44,-1.34524653e-43,-2.53635022e-43,-1.40129846e-44,-1.33123354e-43,-2.52233724e-43,
    -1.26116862e-44,-1.31722056e-43,-2.50832425e-43,-1.12103877e-44,-1.30320757e-43,-2.49431127e-43,-9.80908925e-45,-1.28919459e-43,
    -2.48029828e-43,-8.40779079e-45,-1.2751816e-43,-2.4662853e-43,-7.00649232e-45,-1.26116862e-43,-2.45227231e-43,-5.60519386e-45,
    -1.24715563e-43,-2.43825933e-43,-4.20389539e-45,-1.23314265e-43,-2.42424634e-43,-2.80259693e-45,-1.21912966e-43,-2.41023336e-43,
    -1.40129846e-45,-1.20511668e-43,-2.39622037e-43,-3.58732407e-43,-1.19110369e-43,-2.38220739e-43,-3.57331108e-43,-1.17709071e-43,
    -2.3681944e-43,-3.5592981e-43,-1.16307773e-43,-2.35418142e-43,-3.54528511e-43,-1.14906474e-43,-2.34016844e-43,-3.53127213e-43,
    -1.13505176e-43,-2.32615545e-43,-3.51725915e-43,-1.12103877e-43,-2.31214247e-43,-3.50324616e-43,-1.10702579e-43,-2.29812948e-43,
    -3.48923318e-43,-1.0930128e-43,-2.2841165e-43,-3.47522019e-43,-1.07899982e-43,-2.27010351e-43,-3.46120721e-43,-1.06498683e-43,
    -2.25609053e-43,-3.44719422e-43,-1.05097385e-43,-2.24207754e-43,-3.43318124e-43,-1.03696086e-43,-2.22806456e-43,-3.41916825e-43,
    -1.02294788e-43,-2.21405157e-43,-3.40515527e-43,-1.00893489e-43,-2.20003859e-43,-3.39114228e-43,-9.9492191e-44,-2.1860256e-43,
    -3.3771293e-43,-9.80908925e-44,-2.17201262e-43,-3.36311631e-43,-9.6689594e-44,-2.15799964e-43,-3.34910333e-43,-9.52882956e-44,
    -2.14398665e-43,-3.33509035e-43,-9.38869971e-44,-2.12997367e-43,-3.32107736e-43,-9.24856986e-44,-2.11596068e-43,-3.30706438e-43,
    -9.10844002e-44,-2.1019477e-43,-3.29305139e-43,-8.96831017e-44,-2.08793471e-43,-3.27903841e-43,-8.82818033e-44,-2.07392173e-43,
    -3.26502542e-43,-8.68805048e-44,-2.05990874e-43,-3.25101244e-43,-8.54792063e-44,-2.04589576e-43,-3.23699945e-43,-8.40779079e-44,
    -2.03188277e-43,-3.22298647e-43,-8.26766094e-44,-2.01786979e-43,-3.20897348e-43,-8.12753109e-44,-2.0038568e-43,-3.1949605e-43,
    -7.98740125e-44,-1.98984382e-43,-3.18094751e-43,-7.8472714e-44,-1.97583083e-43,-3.16693453e-43,-7.70714155e-44,-1.96181785e-43,
    -3.15292154e-43,-7.56701171e-44,-1.94780487e-43,-3.13890856e-43,-7.42688186e-44,-1.93379188e-43,-3.12489558e-43,-7.28675201e-44,
    -1.9197789e-43,-3.11088259e-43,-7.14662217e-44,-1.90576591e-43,-3.09686961e-43,-7.00649232e-44,-1.89175293e-43,-3.08285662e-43,
    -6.86636248e-44,-1.87773994e-43,-3.06884364e-43,-6.72623263e-44,-1.86372696e-43,-3.05483065e-43,-6.58610278e-44,-1.84971397e-43,
    -3.04081767e-43,-6.44597294e-44,-1.83570099e-43,-3.02680468e-43,-6.30584309e-44,-1.821688e-43,-3.0127917e-43,-6.16571324e-44,
    -1.80767502e-43,-2.99877871e-43,-6.0255834e-44,-1.79366203e-43,-2.98476573e-43,-5.88545355e-44,-1.77964905e-43,-2.97075274e-43,
    -5.7453237e-44,-1.76563607e-43,-2.95673976e-43,-5.60519386e-44,-1.75162308e-43,-2.94272678e-43,-5.46506401e-44,-1.7376101e-43,
    -2.92871379e-43,-5.32493416e-44,-1.72359711e-43,-2.91470081e-43,-5.18480432e-44,-1.70958413e-43,-2.90068782e-43,-5.04467447e-44,
    -1.69557114e-43,-2.88667484e-43,-4.90454463e-44,-1.68155816e-43,-2.87266185e-43,-4.76441478e-44,-1.66754517e-43,-2.85864887e-43,
    -4.62428493e-44,-1.65353219e-43,-2.84463588e-43,-4.48415509e-44,-1.6395192e-43,-2.8306229e-43,-4.34402524e-44,-1.62550622e-43,
    -2.81660991e-43,-4.20389539e-44,-1.61149323e-43,-2.80259693e-43,-4.06376555e-44,-1.59748025e-43,-2.78858394e-43,-3.9236357e-44,
    -1.58346726e-43,-2.77457096e-43,-3.78350585e-44,-1.56945428e-43,-2.76055797e-43,-3.64337601e-44,-1.5554413e-43,-2.74654499e-43,
    -3.50324616e-44,-1.54142831e-43,-2.73253201e-43,-3.36311631e-44,-1.52741533e-43,-2.71851902e-43,-3.22298647e-44,-1.51340234e-43
};

// Gets the current value of the seed as a zero-extended 24bit integer
std::uint32_t VB6RNG::getSeed() {
    return 16777216 * getLastGeneratedNumber();
}

// Sets the seed of the RNG. The most significant byte of newSeed is ignored.
void VB6RNG::setSeed(std::uint32_t newSeed) {
    VARIANTARG arg;
    union {
        double dbl;
        struct {
            std::uint32_t placeholder;
            std::uint16_t second_word;
            std::uint16_t first_word;
        };
    } doublePunner; // Blame Microsoft for the type punning shenanigans.

    // Sets the least significant byte of the seed
    arg.vt = VT_R4;
    arg.fltVal = rtcRandomNext_args[newSeed & 0xFF];

    (void) rtcRandomNext(&arg);

    // Sets the two middle bytes of the seed
    doublePunner.dbl = 1.0;
    doublePunner.second_word = doublePunner.first_word ^ (newSeed >> 8);

    arg.vt = VT_R8;
    arg.dblVal = doublePunner.dbl;
    
    rtcRandomize(&arg);
}

// Returns the last generated random number. Equivalent to calling Rnd(0) in VB6.
float VB6RNG::getLastGeneratedNumber() {
    VARIANTARG arg;

    arg.vt = VT_R4;
    arg.fltVal = 0.0f;

    return rtcRandomNext(&arg);
}

// Generates a uniformly distributed random number. Equivalent to calling Rnd() in VB6.
float VB6RNG::generateNumber() {
    VARIANTARG arg;

    arg.vt = VT_R4;
    arg.fltVal = 1.0f;

    return rtcRandomNext(&arg);
}